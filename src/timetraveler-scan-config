#!/bin/bash

set -e
D="$(dirname "$(readlink -f "$0")")"
for libdir in "$D" "$TT_LIBDIR" /usr/share/timetraveler; do
    if [ -e "$libdir/timetraveler.lib.sh" ]; then
        . "$libdir/timetraveler.lib.sh"
        lib_loaded=true
        break
    fi
done
if [ "$lib_loaded" != "true" ]; then
    >&2 echo
    >&2 echo "E: Couldn't find timetraveler libraries! Are you sure you've installed"
    >&2 echo "   timetraveler correctly?"
    >&2 echo
    exit 23
fi


function show_scanconfig_help() {
    {
        echo
        echo " SYNOPSIS"
        echo "      timetraveler scan-config (-h|--help)"
        echo
        echo " DESCRIPTION"
        echo "      (Re)Scan timetraveler configuration file and rebuild systemd timers accordingly."
        echo
        echo "      Timetraveler uses systemd tiemrs to implement backup scheduling. Timers are"
        echo "      specified in the 'frequency' key of each backup profile (or default to once weekly,"
        echo "      '*-*-1 00:00') and are defined according to systemd's 'OnCalendar' specification."
        echo
        echo "      See https://wiki.archlinux.org/index.php/Systemd/Timers for more information."
        echo
        echo
    }
}


# Loop to gather options
while test $# -gt 0; do
    case "$1" in
        -h|--help)
            show_scanconfig_help
            exit
        ;;

        *)
            >&2 echo
            >&2 echo "E: Illegal command or option '$1'"
            >&2 echo
            show_scanconfig_help >&2
            exit 24
        ;;
    esac
done





# Sometimes this will be run as a user and sometimes as the system
# If user, just update the user's config
# If system, update all users' configs

if [ "$USER" != "root" ] || [ -n "$SUDO_USER" ]; then
    mode="single"
    homes=( "$HOME" )
else
    mode="batch"
    declare -a homes
    oldifs="$IFS"
    IFS=$'\n'
    for h in $(find /home -maxdepth 1 -mindepth 1 -type d); do
        homes["${#homes[@]}"]="$h"
    done
    IFS="$oldifs"
fi




# TODO: Make this resilient to whitespace
for home in ${homes[@]}; do
    u="$(basename "$home")"
    sysddir="$home/.config/systemd/user"

    # First clear all current systemd files, if existing
    if [ -d "$sysddir" ]; then
        rm "$sysddir"/timetraveler* 2>/dev/null || true
        rm "$sysddir"/timers.target.wants/timetraveler* 2>/dev/null || true
    fi

    # Now make sure it makes sense to proceed
    if [ ! -e "$home/.config/timetraveler" ] && [ "$mode" == "batch" ]; then
        >&2 echo "W: User '$u' doesn't have a timetraveler config. Skipping."
        continue
    fi


    # Verify and Parse user config file
    verify_config "$home" # Sets TT_CONF_FILE
    parse_config "$TT_CONF_FILE" # Sets CNF_PRFS* variables




    # Now run through backup profiles and create systemd files
    pn=0
    declare -a ENABLE_TIMERS
    if [ "$u" == "$USER" ]; then
        mkdir -p "$sysddir"
    else
        su "$u" -c "mkdir -p '$sysddir'"
    fi
    for prf in "${CNF_PRFS[@]}"; do
        SERVICE_FILE="$sysddir/timetraveler-$prf.service"
        TIMER_FILE="$sysddir/timetraveler-$prf.timer"
        INTERVAL="${CNF_PRFS_FREQUENCIES[$pn]}"
        if [ -z "$INTERVAL" ] || [ "$INTERVAL" == "null" ]; then
            INTERVAL="*-*-* 00:00"
        fi

        if ! CMD="$(command -v timetraveler)"; then
            CMD="$(dirname "$(readlink -f "$0")")/timetraveler"
        fi

        # Augment profile pointer
        !((pn++))

        # Create service file
        cat << EOF > /tmp/tt-service-file.tmp
[Unit]
Description=Timetraveler backup for profile '$prf'

[Service]
Type=simple
ExecStart=$CMD backup "$prf"

EOF

        if [ "$u" == "$USER" ]; then
            mv /tmp/tt-service-file.tmp "$SERVICE_FILE"
        else
            su "$u" -c "cp /tmp/tt-service-file.tmp '$SERVICE_FILE'"
            rm /tmp/tt-service-file.tmp
        fi


        # If interval is special value "never", delete timer and move on
        if [ "$INTERVAL" == "never" ]; then
            if [ "$u" == "$USER" ]; then
                systemctl --user disable --now "$TIMER_FILE" 2>/dev/null || true
            else
                # Disable manually
                rm "$sysddir/timers.target.wants/$(basename "$TIMER_FILE")" 2>/dev/null || true
                if [ ! "$(ls -A "$sysddir/timers.target.wants")" ]; then
                    rm "$sysddir/timers.target.wants"
                fi
            fi
            rm "$TIMER_FILE" 2>/dev/null || true

        # Otherwise, add timer to list of timers to enable and (re)create timer unit file
        else

            # Add timer to list to enable
            ENABLE_TIMERS[${#ENABLE_TIMERS[@]}]="$TIMER_FILE"

            cat << EOF > /tmp/tt-timer.tmp
[Unit]
Description=Run timetraveler backup profile '$prf' on schedule

[Timer]
OnCalendar=$INTERVAL
Persistent=true

[Install]
WantedBy=timers.target

EOF

            if [ "$u" == "$USER" ]; then
                mv /tmp/tt-timer.tmp "$TIMER_FILE"
            else
                su "$u" -c "cp /tmp/tt-timer.tmp '$TIMER_FILE'"
                rm /tmp/tt-timer.tmp
            fi
        fi
    done

    # Reload systemd and enable everything
    if [ "$u" == "$USER" ]; then
        systemctl --user daemon-reload
        for timer in "${ENABLE_TIMERS[@]}"; do
            systemctl --user enable --now "$timer"
        done
    else
        for timer in "${ENABLE_TIMERS[@]}"; do
            cmd="mkdir -p '$sysddir/timers.target.wants';"
            cmd="$cmd ln -nsf '$timer' '$sysddir/timers.target.wants/';"
            su "$u" -c "$cmd"
        done
    fi
done


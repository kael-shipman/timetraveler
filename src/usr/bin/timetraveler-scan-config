#!/bin/bash

set -e
D="$(dirname "$(readlink -f "$0")")"
. require libtimetraveler.sh "$D/../lib/timetraveler" "$TT_LIBDIR" /usr/lib/timetraveler

function show_scanconfig_help() {
    {
        echo
        echo " SYNOPSIS"
        echo "      timetraveler scan-config (-h|--help)"
        echo
        echo " DESCRIPTION"
        echo "      (Re)Scan timetraveler configuration file and rebuild systemd timers accordingly."
        echo
        echo "      Timetraveler uses systemd timers to implement backup scheduling. Timers are"
        echo "      specified in the 'frequency' key of each backup profile (or default to once weekly,"
        echo "      'Sun *-*-* 00:00') and are defined according to systemd's 'OnCalendar' specification."
        echo
        echo "      See https://wiki.archlinux.org/index.php/Systemd/Timers for more information."
        echo
        echo
    }
}


# Loop to gather options
while test $# -gt 0; do
    case "$1" in
        -h|--help)
            show_scanconfig_help
            exit
        ;;

        *)
            >&2 echo
            >&2 echo "E: Illegal command or option '$1'"
            >&2 echo
            show_scanconfig_help >&2
            exit 24
        ;;
    esac
done





# Sometimes this will be run as a user and sometimes as the system
# If user, just update the user's config
# If system, update all users' configs

if [ "$USER" != "root" ] || [ -n "$SUDO_USER" ]; then
    mode="single"
    if [ -n "$SUDO_USER" ]; then
        homes=( "/home/$SUDO_USER" )
    else
        homes=( "$HOME" )
    fi
else
    mode="batch"
    declare -a homes
    oldifs="$IFS"
    IFS=$'\n'
    for h in $(find /home -maxdepth 1 -mindepth 1 -type d); do
        homes["${#homes[@]}"]="$h"
    done
    IFS="$oldifs"
fi


sysddir="/etc/systemd/system"
mkdir -p "$sysddir"

function clear_deletables() {
    if [ -n "$to_delete" ]; then
        while read delete_file; do
            local base="$(basename "$delete_file" .timer)"
            if [ -n "$base" ]; then
                systemctl disable --now "${base}.timer"
                rm "$sysddir/${base}"* 2>/dev/null || true
            fi
        done <<< "$to_delete"
    fi
}


declare -a ENABLE_TIMERS


# TODO: Make this resilient to whitespace
for home in ${homes[@]}; do
    u="$(basename "$home")"

    # Get a list of all existing timers for this user and queue them for deletion
    to_delete=
    for f in "$sysddir"/timers.target.wants/timetraveler-"${u}"-*; do
        if [ -f "$f" ]; then
            if [ -z "$to_delete" ]; then
                to_delete="$f"
            else
                to_delete="$to_delete"$'\n'"$f"
            fi
        fi
    done

    # Now make sure it makes sense to proceed
    if [ ! -e "$home/.config/timetraveler" ] && [ "$mode" == "batch" ]; then
        >&2 echo "W: User '$u' doesn't have a timetraveler config. Skipping."
        clear_deletables
        continue
    fi


    # Verify and Parse user config file
    verify_config "$home" # Sets TT_CONF_FILE
    parse_config "$TT_CONF_FILE" # Sets CNF_PRFS* variables




    # Now run through backup profiles and create systemd files
    pn=0
    for prf in "${CNF_PRFS[@]}"; do
        SERVICE_FILE="$sysddir/timetraveler-$u-$prf.service"
        TIMER_FILE="$sysddir/timetraveler-$u-$prf.timer"
        INTERVAL="${CNF_PRFS_FREQUENCIES[$pn]}"
        if [ -z "$INTERVAL" ] || [ "$INTERVAL" == "null" ]; then
            INTERVAL="*-*-* 00:00"
        fi

        if ! CMD="$(command -v timetraveler)"; then
            CMD="$(dirname "$(readlink -f "$0")")/timetraveler"
        fi

        # Augment profile pointer
        !((pn++))

        # If interval is special value "never", then just continue
        if [ "$INTERVAL" == "never" ]; then
            continue
        fi

        # Remove from "to_delete" list so we don't delete it
        to_delete="$(echo "$to_delete" | grep -vF "$(basename "$TIMER_FILE")")" || true

        # Create service file
        cat << EOF > "$SERVICE_FILE"
[Unit]
Description=Timetraveler backup for user '$u', profile '$prf'

[Service]
Type=simple
User=$u
ExecStart=$CMD backup "$prf"

EOF

        # Create timer file
        cat << EOF > "$TIMER_FILE"
[Unit]
Description=Run timetraveler backup profile '$prf' for user '$u' on schedule

[Timer]
OnCalendar=$INTERVAL
Persistent=true

[Install]
WantedBy=timers.target

EOF

        # Add timer to list to enable
        ENABLE_TIMERS[${#ENABLE_TIMERS[@]}]="$TIMER_FILE"
    done

    clear_deletables
done

# Reload systemd and enable everything
systemctl daemon-reload
for timer in "${ENABLE_TIMERS[@]}"; do
    systemctl enable --now "$timer"
done

